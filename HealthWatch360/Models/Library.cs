// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using HealthWatch360.Models;
//
//    var library = Library.FromJson(jsonString);
using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
namespace HealthWatch360.Models
{

    public partial class Library
    {
        [Key]
        public int LibraryID { get; set; }

        [JsonProperty("numFound")]
        public long NumFound { get; set; }
    }

    public partial class Doc
    {

        [JsonProperty("isbn", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Isbn { get; set; }

        [JsonProperty("author_name", NullValueHandling = NullValueHandling.Ignore)]
        public string[] AuthorName { get; set; }

        [JsonProperty("language", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Language { get; set; }

        [JsonProperty("number_of_pages_median", NullValueHandling = NullValueHandling.Ignore)]
        public long? NumberOfPagesMedian { get; set; }

        [JsonProperty("publish_date", NullValueHandling = NullValueHandling.Ignore)]
        public string[] PublishDate { get; set; }

        [JsonProperty("publisher", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Publisher { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("id_amazon", NullValueHandling = NullValueHandling.Ignore)]
        public string[] IdAmazon { get; set; }

        [JsonProperty("subject", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Subject { get; set; }

        [JsonProperty("ratings_average", NullValueHandling = NullValueHandling.Ignore)]
        public double? RatingsAverage { get; set; }

        [JsonProperty("ratings_count", NullValueHandling = NullValueHandling.Ignore)]
        public long? RatingsCount { get; set; }

        [JsonProperty("want_to_read_count", NullValueHandling = NullValueHandling.Ignore)]
        public long? WantToReadCount { get; set; }

        [JsonProperty("currently_reading_count", NullValueHandling = NullValueHandling.Ignore)]
        public long? CurrentlyReadingCount { get; set; }

        [JsonProperty("already_read_count", NullValueHandling = NullValueHandling.Ignore)]
        public long? AlreadyReadCount { get; set; }

        [JsonProperty("subtitle", NullValueHandling = NullValueHandling.Ignore)]
        public string Subtitle { get; set; }
    }

    public enum EbookAccess { Borrowable, NoEbook };

    public enum TypeEnum { Work };

    public partial class Library
    {
        public static Library FromJson(string json) => JsonConvert.DeserializeObject<Library>(json, HealthWatch360.Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Library self) => JsonConvert.SerializeObject(self, HealthWatch360.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                EbookAccessConverter.Singleton,
                TypeEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class EbookAccessConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(EbookAccess) || t == typeof(EbookAccess?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "borrowable":
                    return EbookAccess.Borrowable;
                case "no_ebook":
                    return EbookAccess.NoEbook;
            }
            throw new Exception("Cannot unmarshal type EbookAccess");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (EbookAccess)untypedValue;
            switch (value)
            {
                case EbookAccess.Borrowable:
                    serializer.Serialize(writer, "borrowable");
                    return;
                case EbookAccess.NoEbook:
                    serializer.Serialize(writer, "no_ebook");
                    return;
            }
            throw new Exception("Cannot marshal type EbookAccess");
        }

        public static readonly EbookAccessConverter Singleton = new EbookAccessConverter();
    }

    internal class DecodeArrayConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long[]);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            reader.Read();
            var value = new List<long>();
            while (reader.TokenType != JsonToken.EndArray)
            {
                var converter = ParseStringConverter.Singleton;
                var arrayItem = (long)converter.ReadJson(reader, typeof(long), null, serializer);
                value.Add(arrayItem);
                reader.Read();
            }
            return value.ToArray();
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            var value = (long[])untypedValue;
            writer.WriteStartArray();
            foreach (var arrayItem in value)
            {
                var converter = ParseStringConverter.Singleton;
                converter.WriteJson(writer, arrayItem, serializer);
            }
            writer.WriteEndArray();
            return;
        }

        public static readonly DecodeArrayConverter Singleton = new DecodeArrayConverter();
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "work")
            {
                return TypeEnum.Work;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            if (value == TypeEnum.Work)
            {
                serializer.Serialize(writer, "work");
                return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }
}