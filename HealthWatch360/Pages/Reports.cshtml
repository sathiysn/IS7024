@page
@using HealthWatch360.Models
@using Newtonsoft.Json
@model HealthWatch360.Pages.ReportsModel
@{
    ViewData["Title"] = "Reports Page";
}

<div class="card bg-dark text-light mb-4">
    <div class="card-body">
        <h5 class="text-center">Nutrient Breakdown</h5>

        <!-- Food Search and Selection -->
        <input type="text" id="foodSearch" placeholder="Search for food..." oninput="searchFoods()" class="form-control" />
        <ul id="searchResults" style="list-style-type: none; padding: 0; margin: 0; max-height: 200px; overflow-y: auto;"></ul>

        <!-- Selected Foods -->
        <h6 class="mt-3">Selected Foods:</h6>
        <ul id="selectedFoodsList" style="list-style-type: none; padding: 0; margin: 0;"></ul>
        <button class="btn btn-primary mt-2" onclick="generateNutritionBreakdown(), saveMacroMicroBreakdown()">View Nutrition Breakdown</button>

        <!-- Chart.js Visualization -->
        <canvas id="nutrientChart" class="mt-4"></canvas>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    const allFoods = @Html.Raw(Json.Serialize(Model.FoundationFoods)); // Serialized food items
    let selectedFoods = []; // List of selected foods
    let nutrientChart; // Global variable for the Chart.js instance

    // Function to search foods
    function searchFoods() {
        const searchInput = document.getElementById("foodSearch").value.toLowerCase();
        const searchResults = document.getElementById("searchResults");
        searchResults.innerHTML = ''; // Clear previous results

        const filteredFoods = allFoods.filter(food => food.description.toLowerCase().includes(searchInput));
        filteredFoods.forEach(food => {
            const li = document.createElement("li");
            li.innerHTML = `<button class="btn btn-link text-light" onclick="addFood(${food.fdcId})">${food.description}</button>`;
            searchResults.appendChild(li);
        });
    }

    // Function to add food to the selected list
    function addFood(fdcId) {
        const food = allFoods.find(f => f.fdcId === fdcId);

        if (!selectedFoods.some(f => f.fdcId === fdcId)) {
            selectedFoods.push({ ...food, grams: 100 }); // Default grams: 100

            const selectedFoodsList = document.getElementById("selectedFoodsList");
            const li = document.createElement("li");
            li.id = `selectedFood-${fdcId}`;
            li.innerHTML = `
                    ${food.description}
                    <input type="number" class="form-control d-inline-block ml-2" style="width: 80px;" value="100" min="1" onchange="updateGrams(${fdcId}, this.value)" />
                    grams
                    <button class="btn btn-danger btn-sm ml-2" onclick="removeFood(${fdcId})">Remove</button>
                `;
            selectedFoodsList.appendChild(li);
        }
    }

    // Function to update grams for a food item
    function updateGrams(fdcId, grams) {
        const food = selectedFoods.find(f => f.fdcId === fdcId);
        if (food) {
            food.grams = parseFloat(grams);
        }
    }

    // Function to remove food from the selected list
    function removeFood(fdcId) {
        selectedFoods = selectedFoods.filter(f => f.fdcId !== fdcId);
        const foodItem = document.getElementById(`selectedFood-${fdcId}`);
        if (foodItem) foodItem.remove();
    }

    // Function to generate nutrition breakdown
    function generateNutritionBreakdown() {
        const aggregatedNutrients = {};

        selectedFoods.forEach(food => {
            const gramsConsumed = food.grams;
            const foodWeight = food.foodPortions?.[0]?.gramWeight || 100; // Default to 100 grams if no portion info

            food.foodNutrients.forEach(nutrient => {
                const nutrientName = nutrient.nutrient.name;
                const unitName = nutrient.nutrient.unitName;
                const nutrientAmountPerGram = nutrient.amount / foodWeight; // Per gram amount
                const totalNutrientAmount = nutrientAmountPerGram * gramsConsumed; // Adjusted for grams consumed

                if (!aggregatedNutrients[nutrientName]) {
                    aggregatedNutrients[nutrientName] = {
                        amount: 0,
                        unitName: unitName
                    };
                }
                aggregatedNutrients[nutrientName].amount += totalNutrientAmount;
            });
        });

        updateNutrientChart(aggregatedNutrients);
    }

    // Function to update the chart
    function updateNutrientChart(aggregatedNutrients) {
        const labels = Object.keys(aggregatedNutrients);
        const data = labels.map(label => aggregatedNutrients[label].amount);

        const ctx = document.getElementById("nutrientChart").getContext("2d");

        // Destroy previous chart instance if it exists
        if (nutrientChart) {
            nutrientChart.destroy();
        }

        nutrientChart = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Nutrient Amounts',
                    data: data,
                    backgroundColor: '#11C5D9',
                    borderColor: '#11C5D9',
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        callbacks: {
                            label: function (context) {
                                const nutrientName = labels[context.dataIndex];
                                const unit = aggregatedNutrients[nutrientName].unitName;
                                return `${context.raw.toFixed(2)} ${unit}`;
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        ticks: {
                            color: '#FFFFFF' // Change X-axis tick labels to white
                        },
                        grid: {
                            color: '#444444' // Change X-axis grid lines to a dark gray
                        },
                        title: {
                            display: true,
                            text: 'Nutrients',
                            color: '#FFFFFF' // Change X-axis title color to white
                        }
                    },
                    y: {
                        ticks: {
                            color: '#FFFFFF' // Change Y-axis tick labels to white
                        },
                        grid: {
                            color: '#444444' // Change Y-axis grid lines to a dark gray
                        },
                        title: {
                            display: true,
                            text: 'Amount',
                            color: '#FFFFFF' // Change Y-axis title color to white
                        }
                    }
                }
            }
        });
    }
</script>

<script>
    // Function to generate macro and micro breakdown
    function saveMacroMicroBreakdown() {
        const macros = ["Water", "Protein", "Carbohydrate, by summation", "Carbohydrate, by difference", "Total lipid (fat)", "Fiber, total dietary", "Sugars, Total", "Carbohydrate Other" ];
        const micros = ["Nitrogen", "Vitamin C, total ascorbic acid", "Calcium, Ca", "Iron, Fe", "Potassium", "Sodium", "Potassium, K", "Vitamin B-6", "Vitamin B-12", "Vitamin A", "Vitamin E", "Vitamin D", "Vitamin K"];

        let macroTotal = 0;
        let microTotal = 0;

        selectedFoods.forEach(food => {
            const gramsConsumed = food.grams;
            const foodWeight = food.foodPortions?.[0]?.gramWeight || 100;

            food.foodNutrients.forEach(nutrient => {
                const nutrientName = nutrient.nutrient.name;
                const nutrientAmountPerGram = nutrient.amount / foodWeight;
                const totalNutrientAmount = nutrientAmountPerGram * gramsConsumed;

                if (macros.includes(nutrientName)) {
                    macroTotal += totalNutrientAmount;
                } else if (micros.includes(nutrientName)) {
                    microTotal += totalNutrientAmount;
                }
            });
        });

        // Save data to session storage
        sessionStorage.setItem("macroMicroBreakdown", JSON.stringify({
            macro: macroTotal,
            micro: microTotal
        }));

    }
</script>

